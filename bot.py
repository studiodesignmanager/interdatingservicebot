import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import json
import os

TOKEN = "YOUR_BOT_TOKEN_HERE"
ADMIN_ID = 486225736

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã
with open("texts.json", "r", encoding="utf-8") as f:
    texts = json.load(f)

user_data = {}
admin_mode = {}

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def start(message: types.Message):
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text="–†–£–°–°–ö–ò–ô")
    keyboard.button(text="ENGLISH")
    await message.answer(
        "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose your language:",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )


# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ---
@dp.message(lambda message: message.text in ["–†–£–°–°–ö–ò–ô", "ENGLISH"])
async def select_language(message: types.Message):
    lang = "ru" if message.text == "–†–£–°–°–ö–ò–ô" else "en"
    user_data[message.from_user.id] = {"lang": lang, "answers": {}}

    keyboard = ReplyKeyboardBuilder()
    if lang == "ru":
        keyboard.button(text="–ú—É–∂—á–∏–Ω–∞")
        keyboard.button(text="–ñ–µ–Ω—â–∏–Ω–∞")
        text = "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –ø–æ–º–æ—á—å –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:"
    else:
        keyboard.button(text="Man")
        keyboard.button(text="Woman")
        text = "üëã Good afternoon! Please answer a few questions.\n\n‚úçÔ∏è This will help us better understand why you are contacting us and assist you more efficiently.\n\nSelect your gender:"

    await message.answer(text, reply_markup=keyboard.as_markup(resize_keyboard=True))


# --- –û—Ç–≤–µ—Ç: –ø–æ–ª ---
@dp.message(lambda message: message.text in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞", "Man", "Woman"])
async def gender_answer(message: types.Message):
    uid = message.from_user.id
    lang = user_data[uid]["lang"]
    user_data[uid]["answers"]["gender"] = message.text

    if lang == "ru":
        await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?")
    else:
        await message.answer("How old are you?")


# --- –í–æ–∑—Ä–∞—Å—Ç ---
@dp.message(lambda message: message.text.isdigit())
async def age_answer(message: types.Message):
    uid = message.from_user.id
    lang = user_data[uid]["lang"]
    user_data[uid]["answers"]["age"] = message.text

    if lang == "ru":
        await message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?")
    else:
        await message.answer("In which country do you permanently live?")


# --- –°—Ç—Ä–∞–Ω–∞ ---
@dp.message(lambda message: message.from_user.id in user_data and "country" not in user_data[message.from_user.id]["answers"])
async def country_answer(message: types.Message):
    uid = message.from_user.id
    lang = user_data[uid]["lang"]
    user_data[uid]["answers"]["country"] = message.text

    if lang == "ru":
        await message.answer("–ì–¥–µ –≤—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Tinder, Badoo –∏ —Ç.–¥.)?")
    else:
        await message.answer("Where were you registered before (for example, Tinder, Badoo, etc.)?")


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.message(lambda message: message.from_user.id in user_data and "registered_before" not in user_data[message.from_user.id]["answers"])
async def registered_before_answer(message: types.Message):
    uid = message.from_user.id
    lang = user_data[uid]["lang"]
    user_data[uid]["answers"]["registered_before"] = message.text

    if lang == "ru":
        await message.answer("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
    else:
        await message.answer("What is your purpose of dating?")


# --- –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ---
@dp.message(lambda message: message.from_user.id in user_data and "purpose" not in user_data[message.from_user.id]["answers"])
async def purpose_answer(message: types.Message):
    uid = message.from_user.id
    lang = user_data[uid]["lang"]
    user_data[uid]["answers"]["purpose"] = message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
    answers = user_data[uid]["answers"]
    name = message.from_user.full_name or "No name"
    username = f"@{message.from_user.username}" if message.from_user.username else "No username"

    report = (
        f"üìù New form received:\n\n"
        f"üë§ User: {name}\n"
        f"‚öß Gender: {answers.get('gender')}\n"
        f"üìÖ Age: {answers.get('age')}\n"
        f"üåç Country: {answers.get('country')}\n"
        f"üíª Registered before: {answers.get('registered_before')}\n"
        f"üéØ Purpose: {answers.get('purpose')}\n\n"
        f"From: {username} (ID: {uid})"
    )

    await bot.send_message(ADMIN_ID, report)

    if lang == "ru":
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.")
    else:
        await message.answer("‚úÖ Thank you! We have received your answers. Our manager will contact you soon.")

    del user_data[uid]


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("Bot is running...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())









































